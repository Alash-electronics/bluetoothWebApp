#include <Arduino.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

// –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º HM-10 —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ UUID (–∫–∞–∫ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!)
#define SERVICE_UUID           "0000ffe0-0000-1000-8000-00805f9b34fb"
#define CHARACTERISTIC_UUID_TX "0000ffe1-0000-1000-8000-00805f9b34fb"

// LED –ø–∏–Ω (–æ–±—ã—á–Ω–æ GPIO 2 –Ω–∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ ESP32, –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π)
#define LED_PIN 2

BLEServer* pServer = NULL;
BLECharacteristic* pTxCharacteristic = NULL;
bool deviceConnected = false;
bool oldDeviceConnected = false;

class MyServerCallbacks: public BLEServerCallbacks {
  void onConnect(BLEServer* pServer) {
    deviceConnected = true;
    Serial.println("‚úÖ Client Connected!");
    digitalWrite(LED_PIN, HIGH);
  }

  void onDisconnect(BLEServer* pServer) {
    deviceConnected = false;
    Serial.println("‚ùå Client Disconnected");
    digitalWrite(LED_PIN, LOW);
  }
};

class MyCallbacks: public BLECharacteristicCallbacks {
  void onWrite(BLECharacteristic *pCharacteristic) {
    String rxValue = pCharacteristic->getValue().c_str();

    if (rxValue.length() > 0) {
      Serial.print("üì© Received: ");
      Serial.println(rxValue);

      // –≠—Ö–æ –æ–±—Ä–∞—Ç–Ω–æ
      if (deviceConnected) {
        String response = "Echo: " + rxValue;
        pTxCharacteristic->setValue(response.c_str());
        pTxCharacteristic->notify();
        Serial.print("üì§ Sent back: ");
        Serial.println(response);
      }
    }
  }
};

void setup() {
  Serial.begin(115200);
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);

  Serial.println("\n\nüöÄ Starting BLE Server...");

  // –°–æ–∑–¥–∞–µ–º BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
  // –í–ê–ñ–ù–û: –ò–º—è –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "BT" –∏–ª–∏ "HM" –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
  BLEDevice::init("BT05");

  Serial.println("‚úì BLE Device created: BT05");

  // –°–æ–∑–¥–∞–µ–º BLE —Å–µ—Ä–≤–µ—Ä
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  Serial.println("‚úì BLE Server created");

  // –°–æ–∑–¥–∞–µ–º BLE —Å–µ—Ä–≤–∏—Å —Å HM-10 UUID
  BLEService *pService = pServer->createService(SERVICE_UUID);

  Serial.print("‚úì BLE Service created with UUID: ");
  Serial.println(SERVICE_UUID);

  // –°–æ–∑–¥–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É (TX/RX –≤ –æ–¥–Ω–æ–π)
  // –í–ê–ñ–ù–û: –ù—É–∂–Ω—ã –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞: READ, WRITE, WRITE_NR (no response), NOTIFY
  pTxCharacteristic = pService->createCharacteristic(
    CHARACTERISTIC_UUID_TX,
    BLECharacteristic::PROPERTY_READ   |
    BLECharacteristic::PROPERTY_WRITE  |
    BLECharacteristic::PROPERTY_WRITE_NR |
    BLECharacteristic::PROPERTY_NOTIFY |
    BLECharacteristic::PROPERTY_INDICATE
  );

  // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –¥–ª—è notify
  pTxCharacteristic->addDescriptor(new BLE2902());

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
  pTxCharacteristic->setCallbacks(new MyCallbacks());

  Serial.print("‚úì Characteristic created with UUID: ");
  Serial.println(CHARACTERISTIC_UUID_TX);

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
  pService->start();

  Serial.println("‚úì Service started");

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º advertising
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(true);
  pAdvertising->setMinPreferred(0x06);  // –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  pAdvertising->setMinPreferred(0x12);

  // –ó–∞–ø—É—Å–∫–∞–µ–º advertising
  BLEDevice::startAdvertising();

  Serial.println("‚úì Advertising started");
  Serial.println("\nüéâ BLE Server is ready!");
  Serial.println("üì± Open web app and connect to 'BT05'");
  Serial.println("‚è≥ Waiting for connection...\n");
}

void loop() {
  // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  if (!deviceConnected && oldDeviceConnected) {
    delay(500);
    pServer->startAdvertising();
    Serial.println("üîÑ Restarting advertising...");
    oldDeviceConnected = deviceConnected;
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
  if (deviceConnected && !oldDeviceConnected) {
    oldDeviceConnected = deviceConnected;
  }

  delay(10);
}
